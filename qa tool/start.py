# Code Generated by Sidekick is for learning and experimentation purposes only.

from flask import Flask, render_template_string, request

import requests

from bs4 import BeautifulSoup

from spellchecker import SpellChecker

from urllib.parse import urljoin

 

app = Flask(__name__)

 

HTML_TEMPLATE = """

<!DOCTYPE html>

<html>

<head>

    <title>Webpage QA Tool</title>

</head>

<body>

    <h2>Webpage QA Tool</h2>

    <form action="/check" method="post">

        <label for="url">Enter URL to Test:</label>

        <input type="text" id="url" name="url" required>

        <button type="submit">Check</button>

    </form>

    {% if results %}

        <h3>Results:</h3>

        <pre>{{ results }}</pre>

    {% endif %}

</body>

</html>

"""

 

def check_broken_links(url):

    broken_links = []

    try:

        response = requests.get(url)

        soup = BeautifulSoup(response.text, 'html.parser')

        links = [a.get('href') for a in soup.find_all('a', href=True)]

        for link in links:

            full_url = urljoin(url, link)

            try:

                res = requests.head(full_url, allow_redirects=True, timeout=5)

                if res.status_code >= 400:

                    broken_links.append(full_url)

            except Exception:

                broken_links.append(full_url)

    except Exception as e:

        broken_links.append(f"Error fetching {url}: {e}")

    return broken_links

 

def check_missing_images(url):

    missing_images = []

    try:

        response = requests.get(url)

        soup = BeautifulSoup(response.text, 'html.parser')

        images = [img.get('src') for img in soup.find_all('img', src=True)]

        for img in images:

            img_url = urljoin(url, img)

            try:

                res = requests.head(img_url, allow_redirects=True, timeout=5)

                if res.status_code >= 400:

                    missing_images.append(img_url)

            except Exception:

                missing_images.append(img_url)

    except Exception as e:

        missing_images.append(f"Error fetching images from {url}: {e}")

    return missing_images

 

def check_spelling(url):

    misspelled = set()

    spell = SpellChecker()

    try:

        response = requests.get(url)

        soup = BeautifulSoup(response.text, 'html.parser')

        text = soup.get_text()

        words = text.split()

        misspelled = spell.unknown(words)

    except Exception as e:

        misspelled.add(f"Error checking spelling on {url}: {e}")

    return misspelled

 

def check_uk_spellings(url, uk_words=None):

    if uk_words is None:

        uk_words = {"colour", "favour", "organise", "centre", "defence", "travelling"}

    found_uk = set()

    try:

        response = requests.get(url)

        soup = BeautifulSoup(response.text, 'html.parser')

        text = soup.get_text()

        words = set(text.split())

        found_uk = words.intersection(uk_words)

    except Exception as e:

        found_uk.add(f"Error checking UK spellings on {url}: {e}")

    return found_uk

 

def run_qa(url):

    output = []

    broken_links = check_broken_links(url)

    output.append(f"Broken links ({len(broken_links)}):")

    for link in broken_links:

        output.append(f"  - {link}")

 

    missing_images = check_missing_images(url)

    output.append(f"\nMissing images ({len(missing_images)}):")

    for img in missing_images:

        output.append(f"  - {img}")

 

    misspelled = check_spelling(url)

    output.append(f"\nMisspelled words ({len(misspelled)}):")

    for word in misspelled:

        output.append(f"  - {word}")

 

    uk_spellings = check_uk_spellings(url)

    output.append(f"\nUK spellings found ({len(uk_spellings)}):")

    for word in uk_spellings:

        output.append(f"  - {word}")

 

    return "\n".join(output)

 

@app.route('/', methods=['GET'])

def index():

    return render_template_string(HTML_TEMPLATE)

 

@app.route('/check', methods=['POST'])

def check():

    url = request.form['url']

    results = run_qa(url)

    return render_template_string(HTML_TEMPLATE, results=results)

if __name__ == "__main__":

    app.run(debug=True)